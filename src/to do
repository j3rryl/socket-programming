To build an online dictionary application with indexing for enhanced performance and scalability using Java, you can follow these steps:

1. **Design the Database Schema:** Determine the structure of your dictionary data and create an appropriate database schema. For example, you might have a table called "Dictionary" with columns like "Word" (the word itself) and "Meaning" (the corresponding definition). Additionally, create an index on the "Word" column for faster searches.

2. **Populate the Database:** Load your dictionary data into the database. You can manually insert the word-meaning pairs or write a program to read from a file or an API to fetch the data.

3. **Choose a Framework:** Select a Java framework for building the web application. Some popular choices include Spring Boot, Java Servlets, or JavaServer Faces (JSF).

4. **Develop Backend Server:** Create a backend server using the chosen framework. Implement the necessary API endpoints to handle user search requests and retrieve word meanings from the database.

5. **Handle Search Requests:** When a user makes a search request, the backend server receives the query. Utilize the database's indexing by performing a search query using the indexed "Word" column. For example, using JDBC (Java Database Connectivity), you can execute SQL statements like `SELECT Meaning FROM Dictionary WHERE Word = ?` with a prepared statement and provide the user's search query as a parameter.

6. **Return Meaning to the User:** Once the backend server retrieves the meaning from the database, it can return the response to the user. You can use a suitable format like JSON or XML to structure the response.

7. **Frontend Development:** Build a user interface (UI) for your application using HTML, CSS, and JavaScript. Create a search form where users can enter words and display the results of the search, including the word and its meaning. You can use JavaScript to interact with the backend API and update the UI accordingly.

8. **Deploy the Application:** Deploy your backend server and frontend UI to a hosting provider or cloud platform. Ensure that the backend server has access to the database and configure any necessary security measures. Make sure the application can handle concurrent user requests efficiently, and monitor performance as you scale.

By following these steps, you can create an online dictionary application using Java that maintains indexing for enhanced performance and scalability. Adapt the steps according to your preferred framework, database, and specific requirements.